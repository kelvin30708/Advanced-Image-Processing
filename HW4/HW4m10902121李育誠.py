# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import os
import cv2 as cv
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets

# from test import haar2d_N
class MyWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(MyWindow, self).__init__()
        
        self.imagepath = ""
        self.img = np.NaN
        self.gray = np.NaN
        self.img_wavelet = np.NaN
        # self.noise = np.NaN
        # self.img_num = 0
        # self.noise_std = 0.0

        self.setObjectName("MainWindow")
        self.resize(1040, 600)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.setWindowTitle("AIPm10902121")
        
        self.btn_load = QtWidgets.QPushButton(self.centralwidget)
        self.btn_load.setGeometry(QtCore.QRect(10, 10, 70, 20))
        self.btn_load.setObjectName("btn_load")
        self.btn_load.setText("Load")
        self.btn_load.clicked.connect(self.loadfile)

        self.level_label = QtWidgets.QLabel(self.centralwidget)
        self.level_label.setGeometry(QtCore.QRect(90, 10, 15, 20))
        self.level_label.setText("L:")
        self.level_label.setObjectName("level_label")
        self.level_text = QtWidgets.QTextEdit(self.centralwidget)
        self.level_text.setGeometry(QtCore.QRect(110, 10, 70, 20))
        self.level_text.setObjectName("level_text")
        self.level_text.setEnabled(False)
        self.btn_setlevel = QtWidgets.QPushButton(self.centralwidget)
        self.btn_setlevel.setGeometry(QtCore.QRect(110, 30, 70, 20))
        self.btn_setlevel.setObjectName("btn_setlevel")
        self.btn_setlevel.setText("Set")
        self.btn_setlevel.clicked.connect(self.setlevel)
        self.btn_setlevel.setEnabled(False)

        self.btn_save = QtWidgets.QPushButton(self.centralwidget)
        self.btn_save.setGeometry(QtCore.QRect(190, 10, 70, 20))
        self.btn_save.setObjectName("btn_save")
        self.btn_save.setText("Save")
        self.btn_save.setEnabled(False)
        self.btn_save.clicked.connect(self.savefile)

        

        self.btn_exit = QtWidgets.QPushButton(self.centralwidget)
        self.btn_exit.setGeometry(QtCore.QRect(270, 10, 70, 20))
        self.btn_exit.setObjectName("btn_exit")
        self.btn_exit.setText("Exit")
        self.btn_exit.clicked.connect(self.close)
        
        

        
        
        self.input_label = QtWidgets.QLabel(self.centralwidget)
        self.input_label.setGeometry(QtCore.QRect(10, 50, 47, 12))
        self.input_label.setText("Input:")
        self.input_label.setObjectName("input_label")

        self.output_label = QtWidgets.QLabel(self.centralwidget)
        self.output_label.setGeometry(QtCore.QRect(520, 50, 47, 12))
        self.output_label.setText("Output:")
        self.output_label.setObjectName("output_label")

        self.input_pic = QtWidgets.QLabel(self.centralwidget)
        self.input_pic.setGeometry(QtCore.QRect(10, 62, 512, 512))
        self.input_pic.setText("")
        self.input_pic.setObjectName("input_pic")

        self.output_pic = QtWidgets.QLabel(self.centralwidget)
        self.output_pic.setGeometry(QtCore.QRect(520, 62, 512, 512))
        self.output_pic.setText("")
        self.output_pic.setObjectName("output_pic")

        self.setCentralWidget(self.centralwidget)
        

        
    def loadfile(self):
        
        filePath = QtWidgets.QFileDialog.getOpenFileName(self)
        self.imagepath = filePath[0]
        try:
            self.img = np.NaN
            self.gray = np.NaN
            self.img = cv.imread(self.imagepath)
            self.gray = cv.cvtColor(self.img, cv.COLOR_BGR2GRAY)
            self.img = self.gray
            self.img = cv.resize(self.img, dsize=(512, 512), interpolation=cv.INTER_CUBIC)
            
            # self.gray.resize(512, 512)
            cv.imwrite("gray.jpg", self.gray)                
            self.input_pic.setPixmap(QtGui.QPixmap('gray.jpg'))
            os.remove('gray.jpg')
            
            self.btn_setlevel.setEnabled(True)
            self.level_text.setEnabled(True)
        except cv.error as e:
            return

        
        # self.btn_save.setEnabled(True)
        
    def savefile(self):                  
        save_path = os.path.splitext(self.imagepath)[0]
        cv.imwrite(save_path+'_wavelet.jpg', self.img_wavelet)
        self.btn_save.setEnabled(True)

    def setlevel(self):
        N = int(self.level_text.toPlainText())        
        self.img_wavelet = haar2d_N(self.img, N)
        cv.imwrite('tmp_wavelet.jpg', self.img_wavelet)
        self.output_pic.setPixmap(QtGui.QPixmap('tmp_wavelet.jpg'))
        os.remove('tmp_wavelet.jpg')          
        self.btn_save.setEnabled(True)
    

def haar2d(img):
    m = int(img.shape[0])
    time = int(m/2)
    ll = []
    hl = []
    lh = []
    hh = []
    for i in np.arange(0, m, 2):
        for j in np.arange(0, m, 2):
            #take the four elements in the picture
            A = int(img[i][j])
            B = int(img[i][j+1])
            C = int(img[i+1][j])
            D = int(img[i+1][j+1])
            
            # #calculate each parameter
            ll.append(np.uint8(abs((A + B + C + D)/4)))
            hl.append(np.uint8(abs((A - B + C - D)/4)))
            lh.append(np.uint8(abs((A + B - C - D)/4)))
            hh.append(np.uint8(abs((A - B - C + D)/4)))
    
    # reshape these coeficient to time * time (time = m/2)        
    ll = np.asarray(ll)
    ll = np.reshape(ll, (time, time))
    hl = np.asarray(hl)
    hl = np.reshape(hl, (time, time))*int(255/(np.amax(hl)-np.amin(hl)))
    lh = np.asarray(lh)
    lh = np.reshape(lh, (time, time))*int(255/(np.amax(lh)-np.amin(lh)))
    hh = np.asarray(hh)
    hh = np.reshape(hh, (time, time))*int(255/(np.amax(hh)-np.amin(hh)))
    # concate each of the parameters to a picture
    tmp1 = np.concatenate((ll, hl), axis=1)
    tmp0 = np.concatenate((lh, hh), axis=1)
    haar_trans = np.concatenate((tmp1, tmp0), axis=0)
    return ll,  haar_trans
def haar2d_N(img, N):
    ll, haar_trans = haar2d(img)
    ll_0 = ll
    for i in range(N-1):
        ll_0, haar_trans_0 = haar2d(ll_0)
        m = haar_trans_0.shape[0]
        haar_trans[0:m, 0:m] = haar_trans_0
    return haar_trans



if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    ui = MyWindow()
    ui.show()
    sys.exit(app.exec_())
