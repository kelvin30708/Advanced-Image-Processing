# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
import os
import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
from PyQt5 import QtCore, QtGui, QtWidgets
from numpy.core.fromnumeric import std
class MyWindow(QtWidgets.QMainWindow):
    def __init__(self):
        super(MyWindow, self).__init__()
        
        self.imagepath = ""
        self.img = np.NaN
        self.gray = np.NaN
        self.img_noise = np.NaN
        self.noise = np.NaN
        # self.img_num = 0
        # self.noise_std = 0.0

        self.setObjectName("MainWindow")
        self.resize(1680, 600)
        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")
        self.setWindowTitle("AIPm10902121")
        
        self.btn_load = QtWidgets.QPushButton(self.centralwidget)
        self.btn_load.setGeometry(QtCore.QRect(10, 10, 70, 20))
        self.btn_load.setObjectName("btn_load")
        self.btn_load.setText("Load")
        self.btn_load.clicked.connect(self.loadfile)

        self.std_label = QtWidgets.QLabel(self.centralwidget)
        self.std_label.setGeometry(QtCore.QRect(90, 10, 15, 20))
        self.std_label.setText("std:")
        self.std_label.setObjectName("std_label")
        self.std_text = QtWidgets.QTextEdit(self.centralwidget)
        self.std_text.setGeometry(QtCore.QRect(110, 10, 70, 20))
        self.std_text.setObjectName("std_text")
        self.std_text.setEnabled(False)
        self.btn_setstd = QtWidgets.QPushButton(self.centralwidget)
        self.btn_setstd.setGeometry(QtCore.QRect(110, 30, 70, 20))
        self.btn_setstd.setObjectName("btn_setstd")
        self.btn_setstd.setText("Set std.")
        self.btn_setstd.clicked.connect(self.setstd)
        self.btn_setstd.setEnabled(False)

        self.btn_save = QtWidgets.QPushButton(self.centralwidget)
        self.btn_save.setGeometry(QtCore.QRect(190, 10, 70, 20))
        self.btn_save.setObjectName("btn_save")
        self.btn_save.setText("Save")
        self.btn_save.setEnabled(False)
        self.btn_save.clicked.connect(self.savefile)

        

        self.btn_exit = QtWidgets.QPushButton(self.centralwidget)
        self.btn_exit.setGeometry(QtCore.QRect(270, 10, 70, 20))
        self.btn_exit.setObjectName("btn_exit")
        self.btn_exit.setText("Exit")
        self.btn_exit.clicked.connect(self.close)
        
        

        
        
        self.input_label = QtWidgets.QLabel(self.centralwidget)
        self.input_label.setGeometry(QtCore.QRect(10, 50, 47, 12))
        self.input_label.setText("Input:")
        self.input_label.setObjectName("input_label")

        self.output_label = QtWidgets.QLabel(self.centralwidget)
        self.output_label.setGeometry(QtCore.QRect(520, 50, 47, 12))
        self.output_label.setText("Output:")
        self.output_label.setObjectName("output_label")

        self.histogram_label = QtWidgets.QLabel(self.centralwidget)
        self.histogram_label.setGeometry(QtCore.QRect(1030, 50, 200, 12))
        self.histogram_label.setText("noise histogram:")
        self.histogram_label.setObjectName("histogram_label")

        self.input_pic = QtWidgets.QLabel(self.centralwidget)
        self.input_pic.setGeometry(QtCore.QRect(10, 62, 500, 500))
        self.input_pic.setText("")
        self.input_pic.setObjectName("input_pic")

        self.output_pic = QtWidgets.QLabel(self.centralwidget)
        self.output_pic.setGeometry(QtCore.QRect(520, 62, 500, 500))
        self.output_pic.setText("")
        self.output_pic.setObjectName("output_pic")

        self.histogram_pic = QtWidgets.QLabel(self.centralwidget)
        self.histogram_pic.setGeometry(QtCore.QRect(1030, 62, 640, 480))
        self.histogram_pic.setText("")
        self.histogram_pic.setObjectName("histogram_pic")

        self.setCentralWidget(self.centralwidget)
        

        
    def loadfile(self):
        
        filePath = QtWidgets.QFileDialog.getOpenFileName(self)
        self.imagepath = filePath[0]
        try:
            self.img = np.NaN
            self.gray = np.NaN
            self.img = cv.imread(self.imagepath)
            self.gray = cv.cvtColor(self.img, cv.COLOR_BGR2GRAY)
            self.img = self.gray
            cv.imwrite("gray.jpg", self.gray)                
            self.input_pic.setPixmap(QtGui.QPixmap('gray.jpg'))
            os.remove('gray.jpg')
            
            self.btn_setstd.setEnabled(True)
            self.std_text.setEnabled(True)
        except cv.error as e:
            return

        
        # self.btn_save.setEnabled(True)
        
    def savefile(self):                  
        save_path = os.path.splitext(self.imagepath)[0]
        cv.imwrite(save_path+'_noise.jpg', self.img_noise)
        values, counts = np.unique(self.noise, return_counts=True)
        plt.figure()
        plt.bar(values, counts)        
        plt.savefig(save_path+'_noisehistogram.jpg')
        self.btn_save.setEnabled(True)        
        plt.close()

    def setstd(self):
        sigma = float(self.std_text.toPlainText())        
        # concate the last col. if # of cols is odd
        m, n = self.img.shape
        if (n % 2) == 1:
            self.img = np.concatenate([self.img, self.img[:,-1:]], axis=1)
        # print(self.img.dtype)
        self.img_noise = np.zeros((m, n),dtype=np.uint8)        
        for i in range(0, m):
            for j in range(0, n-1, 2):
                # np.random.seed(124)
                phi = np.random.random_sample()
                r = np.random.random_sample()
                theta = 2*np.pi*phi
                u = np.sqrt(-2*np.log(r))
                u2 = u * sigma
                z1 = u2 * np.cos(theta)
                z2 = u2 * np.sin(theta)
                g1 = self.img[i, j]
                g2 = self.img[i, j+1]

                f1 = g1 + z1
                f2 = g2 + z2
                
                if f1 < 0:
                    self.img_noise[i, j] = 0
                elif f1 > 255:
                    self.img_noise[i, j] = 255
                else:
                    self.img_noise[i, j] = np.uint8(f1)
                
                if f2 < 0:
                    self.img_noise[i, j+1] = 0
                elif f2 > 255:
                    self.img_noise[i, j+1] = 255
                else:
                    self.img_noise[i, j+1] = np.uint8(f2)

        self.noise = np.zeros((m, n), dtype=int)

        for i in range(0, m):
            for j in range(0, n):
                self.noise[i, j] = (int(self.img_noise[i, j]) - int(self.img[i, j]))
                # tmp[i, j] = (int(img2[i, j]) - int(img[i, j]))  + 127
        # tmp = tmp / 2
        cv.imwrite('tmp_noise.jpg', self.img_noise)
        self.output_pic.setPixmap(QtGui.QPixmap('tmp_noise.jpg'))
        os.remove('tmp_noise.jpg')
        # cv.imwrite(filename, img)
        mean = np.mean(self.noise)
        deviation = np.std(self.noise)
        # print(mean)
        # print(deviation)        
        self.histogram_label.setText(f'noise histogram: std.:{deviation:.3f}  mean:{mean:.3f}')

        values, counts = np.unique(self.noise, return_counts=True)
        plt.figure()
        plt.bar(values, counts)
        # QtGui.QImage()
        
        plt.savefig('tmp.jpg')
        # self.output_pic.setPixmap(QtGui.QPixmap('histogram.jpg'))
        # print(type(QtGui.QPixmap('histogram.jpg')))
        # shave histogram
        self.histogram_pic.setPixmap(QtGui.QPixmap('tmp.jpg'))

        self.btn_save.setEnabled(True)        
        plt.close()
        os.remove('tmp.jpg')





if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    ui = MyWindow()
    ui.show()
    sys.exit(app.exec_())
